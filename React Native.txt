<Style>
padding: "apx bpx" -> 위아래 apx, 양옆 bpx
paddingVertical, paddingHorizontal : RN에만 있는 속성
colors.js 만들어서 사용하는 게 편함
    안에 theme object 만들어서 색상표 저장하기
    export const theme으로 선언하여 다른 파일에서 사용 가능하도록 함
    이렇게 export하면 다른 파일에서 theme.bg 이런 식으로 사용 가능
onPress : 클릭 시 실행되는 이벤트
onPressIn, onPressOut : 커서가 들어갈 때, 나갈 때 실행
[버튼의 몇 가지 컴포넌트]
TouchableOpacity : View와 비슷함, 누르는 이벤트 listen 가능 - 가장 많이 사용
    투명도(Opacity) 있는 이유는 누를 때 애니메이션 있기 때문
    activeOpacity 값 조절하여 투명도를 조절할 수 있음
TouchableHighlight : 클릭 시 배경색이 바뀌도록 함
    underlayColor="" 설정해 주면 버튼의 배경색이 해당 색으로 바뀜
TouchableWithoutFeedback : 화면의 가장 위에서 일어나는 이벤트 확인
    인터페이스에 변화는 없음, 버튼은 쓰고 싶은데 효과 쓰기 싫을 때 사용
pressable : 인터페이스 변화 없음, 다만 새로 나온 거라 속성 많음. 찾아보기
    hitslope : 요소 바깥 어디까지 클릭을 감지할지 정함. pressable에만 사용 가능

Object.assign 대체할 방법 : const newToDos = {...toDos, [Date.now()] : {text, working}}
Object.keys(object) : object의 key들의 array 보여줌 -> map 사용 가능
    Object.keys(toDos).map(key => 컴포넌트) 형식
    기존에 map 쓰던 방식으로 사용 가능, toDos[key].text가 해당 key에 대응하는 내용
문제 : work에 있는 내용이 travel에도 나옴, 구분이 안 됨
    해결 : toDos[key].working (텍스트의 working)과 현재 화면의 working을 비교
        -> 같으면 내보내고 같지 않으면 표시하지 않음
        삼항 조건문 사용하기

<AsyncStorage>
내용 저장 : AsyncStorage 사용
    expo install @react-native-async-storage/async-storage
    참고 : expo install은 npm install을 실행시킴, expo와 동일한 버전으로 다운로드해줌
사용법 : await AsyncStorage.setItem('@storage_Key', value)
    브라우저의 local storage처럼 작동, 단 await 사용해야 함
    value에는 string만 들어갈 수 있음
saveToDos : 현재의 toDos를 string으로 바꿔주고 await AsyncStorage.setItem 해 줌
    JSON.stringify : object를 string으로 바꿔줌
    함수 내에 await 쓰려면 async 필요함 (비동기 함수 내에서만 사용 가능)
loadToDos : 저장한 내용 가져오는 함수, await AsyncStorage.getItem(STORAGE_KEY) 사용
    이후 saveToDos에서 string으로 바뀐 object를 JSON.parse 통해서 되돌림
저장에 관련된 구문에는 try catch 문 쓰는 것이 좋음 - 오류 날 수도 있기 때문 (저장공간 이슈 등)
deleteToDo : id 사용해서 ToDo 지우는 함수, X 버튼에서 실행됨
    {...ToDos} 로 기존 ToDos 복제 -> delete newToDos[key]로 해당 key 가진 원소 삭제
    setToDos(newToDos)로 ToDo 바꿔주고 await saveToDos(newToDos)로 ToDos 저장
    object 복제할 수 있는 이유 : 아직 state에 있지 않기 때문
        쉽게 말해서 state에서 값 바꾼 다음에 다시 넣는 것
        {...toDos}로 안 하고 바로 ToDos 사용하면 이후 setToDos로 state 변경시 re-render가 되지 않음
Alert.prompt("", "") : iOS에만 존재
Alert.alert("", "", []) 사용하여 Alert 보내기
    [] 내에는 {text: "내용"} 형식으로 버튼 넣을 수 있음
    그 옆에 ,onPress 형식으로 넣어서 버튼 누른 뒤 동작 만들 수 있음, 스타일처럼 넣으면 됨
    onPress: () => 내용 넣으면 됨
async, await 안 써도 상관은 없음 -> 먼저 진행시키고 나중에 저장될 수 있음

<Challenge>
1. 어플리케이션 재시작시 이전에 work, travel 중 어디 있었는지 기억하고 거기서 시작시키기
2. toDo 완료 아이콘 만들고 동작 만들기
3. 텍스트 수정 아이콘 만들고 기능 만들기 