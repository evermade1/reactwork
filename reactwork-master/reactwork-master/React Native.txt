<Style>
padding: "apx bpx" -> 위아래 apx, 양옆 bpx
paddingVertical, paddingHorizontal : RN에만 있는 속성
colors.js 만들어서 사용하는 게 편함
    안에 theme object 만들어서 색상표 저장하기
    export const theme으로 선언하여 다른 파일에서 사용 가능하도록 함
    이렇게 export하면 다른 파일에서 theme.bg 이런 식으로 사용 가능
onPress : 클릭 시 실행되는 이벤트
onPressIn, onPressOut : 커서가 들어갈 때, 나갈 때 실행
[버튼의 몇 가지 컴포넌트]
TouchableOpacity : View와 비슷함, 누르는 이벤트 listen 가능 - 가장 많이 사용
    투명도(Opacity) 있는 이유는 누를 때 애니메이션 있기 때문
    activeOpacity 값 조절하여 투명도를 조절할 수 있음
TouchableHighlight : 클릭 시 배경색이 바뀌도록 함
    underlayColor="" 설정해 주면 버튼의 배경색이 해당 색으로 바뀜
TouchableWithoutFeedback : 화면의 가장 위에서 일어나는 이벤트 확인
    인터페이스에 변화는 없음, 버튼은 쓰고 싶은데 효과 쓰기 싫을 때 사용
pressable : 인터페이스 변화 없음, 다만 새로 나온 거라 속성 많음. 찾아보기
    hitslope : 요소 바깥 어디까지 클릭을 감지할지 정함. pressable에만 사용 가능

working 변수를 true, false로 바꾸는 work, travel 함수를 만들어
    TouchableOpacity 안의 prop으로써 onpress={함수이름} 넣어 working 바꾸도록 함
    스타일에 삼항 의문문 넣기 위해 중괄호 이중으로 치고 (js 사용하기 위함)
    working에 따라 color 바꿔줌

<TextInput>
유저가 글 쓸 수 있는 유일한 컴포넌트 : TextInput
keyboardType : 숫자패드, 이메일 등 특수한 키보드 보여줌
returnKeyType ; return 키패드의 모양을 바꿀 수 있음
react는 컴포넌트, state, prop의 조합으로 어떤 플랫폼에도 접근할 수 있음
secureTextEntry : 비밀번호처럼 내용 숨김
multiline : 한 줄 이상 쓰는 경우 엔터가 전송이 아닌 줄넘기기가 됨
    이걸 안 쓰고 쓰면 한 줄로만 써짐
onChangeText : TextInput의 변화 감지 - onChangeText={함수} 형식으로 prop 넣고
    함수에서 event 받아서 사용하면 됨
autoCapitalize : 첫글자 대문자, 전체 대문자 등 기능 제공
onSubmitEditing : submut 버튼 누를 시 감지
    submit 이후 내용 사용하려면 TextInput에 prop으로 value={text} 넣고 text로 사용해야 함
    이유는 onChangeText에서 text에 내용 저장하고 있었기 때문
useState로 toDo 담을 변수 만들기 -> array로 만들어도 되지만 object {} 로 만들어서 해쉬맵처럼 쓰기
    이렇게 하면 각 toDo에 아이디, 상태 등등을 넣을 수 있음
Object assign : object를 다른 object와 합쳐 새로운 object를 리턴해줌
    사용자가 여러 개 입력 시 오브젝트로 합치기 위해 사용
    Object.assign({}, toDos, {[Date.now()]:{text, work:working}})
    첫번째 {} (빈 오브젝트)에 새로운 오브젝트가 생성됨
    text는 텍스트 변수, work는 work인지 todo인지 확인용 인자

Object.assign 대체할 방법 : const newToDos = {...toDos, [Date.now()] : {text, working}}
Object.keys(object) : object의 key들의 array 보여줌 -> map 사용 가능
    Object.keys(toDos).map(key => 컴포넌트) 형식
    기존에 map 쓰던 방식으로 사용 가능, toDos[key].text가 해당 key에 대응하는 내용
문제 : work에 있는 내용이 travel에도 나옴, 구분이 안 됨
    해결 : toDos[key].working (텍스트의 working)과 현재 화면의 working을 비교
        -> 같으면 내보내고 같지 않으면 표시하지 않음
        삼항 조건문 사용하기

<AsyncStorage>
내용 저장 : AsyncStorage 사용
    expo install @react-native-async-storage/async-storage
    참고 : expo install은 npm install을 실행시킴, expo와 동일한 버전으로 다운로드해줌
사용법 : await AsyncStorage.setItem('@storage_Key', value)
    브라우저의 local storage처럼 작동, 단 await 사용해야 함
    value에는 string만 들어갈 수 있음
saveToDos : 현재의 toDos를 string으로 바꿔주고 await AsyncStorage.setItem 해 줌
    JSON.stringify : object를 string으로 바꿔줌
    함수 내에 await 쓰려면 async 필요함 (비동기 함수 내에서만 사용 가능)
loadToDos : 저장한 내용 가져오는 함수, await AsyncStorage.getItem(STORAGE_KEY) 사용
    이후 saveToDos에서 string으로 바뀐 object를 JSON.parse 통해서 되돌림
저장에 관련된 구문에는 try catch 문 쓰는 것이 좋음 - 오류 날 수도 있기 때문 (저장공간 이슈 등)
deleteToDo : id 사용해서 ToDo 지우는 함수, X 버튼에서 실행됨
    {...ToDos} 로 기존 ToDos 복제 -> delete newToDos[key]로 해당 key 가진 원소 삭제
    setToDos(newToDos)로 ToDo 바꿔주고 await saveToDos(newToDos)로 ToDos 저장
    object 복제할 수 있는 이유 : 아직 state에 있지 않기 때문
        쉽게 말해서 state에서 값 바꾼 다음에 다시 넣는 것
        {...toDos}로 안 하고 바로 ToDos 사용하면 이후 setToDos로 state 변경시 re-render가 되지 않음
Alert.prompt("", "") : iOS에만 존재
Alert.alert("", "", []) 사용하여 Alert 보내기
    [] 내에는 {text: "내용"} 형식으로 버튼 넣을 수 있음
    그 옆에 ,onPress 형식으로 넣어서 버튼 누른 뒤 동작 만들 수 있음, 스타일처럼 넣으면 됨
    onPress: () => 내용 넣으면 됨
async, await 안 써도 상관은 없음 -> 먼저 진행시키고 나중에 저장될 수 있음

<Challenge>
1. 어플리케이션 재시작시 이전에 work, travel 중 어디 있었는지 기억하고 거기서 시작시키기
    해결 : await AsyncStorage 사용하여 working 저장 후 꺼내기 - key만 정해놓고 씀
    travel과 work 함수에서 setitem하고
    load하는 함수 따로 만들어서 (loadWorking) useEffect에서 getitem하기
2. toDo 완료 아이콘 만들고 동작 만들기
    해결 : 아이콘은 삭제 아이콘 만든 것과 동일한 방식으로 하면 됨
    toDo 오브젝트에 done element 추가 - 기본값 false,
    완료 아이콘 누르면 true로 바뀌는 doneToDo 함수 만들기
    완료 여부에 따라 map 나누어서 시각적 효과 주기
3. 텍스트 수정 아이콘 만들고 기능 만들기 
    toDo 오브젝트에 edit element 추가 - 기본값 false,
    원래 할 일 컴포넌트 들어가는 곳에 삼항 조건문 넣어 edit이 false인 경우 원래대로,
    true인 경우 TextInput이 나오도록 함.
    이 인풋의 onChangeText에는 onChangeEditText 함수를 새로 만들어
    새로 만든 editText에 입력한 텍스트가 들어가도록 함.
    onSubmitEditing에는 editFinish 함수를 새로 만들어,
    newToDos에서 해당 key 가진 element의 edit은 false로 다시 바꾸고, 텍스트도 editText로 바꿔준다.
    또한 exitText는 ""로 초기화시킨다.

